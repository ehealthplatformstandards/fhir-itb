<testcase id="get-Immunization" xmlns="http://www.gitb.com/tdl/v1/"
          xmlns:gitb="http://www.gitb.com/core/v1/"
>
    <metadata>
        <gitb:name>Retrieve an Immunization</gitb:name>
        <gitb:version>1.0</gitb:version>
        <gitb:description>The FHIR client requests a specific allergy intolerance from a FHIR server.</gitb:description>
        <!-- See here how we refer to a HTML block that will be added as documentation for the test case. -->
        <!--        <gitb:documentation import="docs/client/test-case-1.html"/>-->
    </metadata>
    <actors>
        <!--
            The Actor IDs need to match those in the test suite and in the test engine. One of these needs to always be the SUT (System Under Test).
        -->
        <gitb:actor id="client" role="SUT"/>
        <gitb:actor id="server"/>
    </actors>
    <variables>
        <!--
            The ProxyHandler will forward the request to the test cases.
        -->
        <var name="request" type="map"/>
    </variables>
    <!--
        Setting "stopOnError" to true will stop the test session as soon as an error is encountered. By default, test sessions will continue regardless of errors.
    -->
    <steps stopOnError="false">
        <send id="proxyRequest"  handler="$DOMAIN{proxyHandler}" from="client" to="server"/>
        <verify handler="StringValidator" desc="Verify HTTP status code">
            <input name="actualstring">$proxyRequest{response}{status}</input>
            <input name="expectedstring">"200 OK"</input>
        </verify>

        <process handler="JSONPointerProcessor" output="resourceType">
            <input name="content">$proxyRequest{response}{body}</input>
            <input name="pointer">"/resourceType"</input>
        </process>

        <verify handler="StringValidator" desc="Verify Resource Type">
            <input name="actualstring">$resourceType</input>
            <input name="expectedstring">"Immunization"</input>
        </verify>

        <process handler="RegExpProcessor" output="resourceId" operation="collect">
            <input name="input">$request{uri}</input>
            <input name="expression">"/([^/]*)$"</input>
        </process>

        <log>"Resource ID: " || $resourceId</log>

    </steps>
</testcase>
